{"ast":null,"code":"var _jsxFileName = \"D:\\\\Power Learn Project\\\\DetoxifyAI\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setSession(session);\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user2;\n      setSession(session);\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signIn = async (email, password) => {\n    const {\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) throw error;\n  };\n  const signUp = async (email, password, username, sobrietyStart) => {\n    const {\n      error: signUpError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (signUpError) throw signUpError;\n\n    // Create user profile\n    const {\n      error: profileError\n    } = await supabase.from('users').insert([{\n      email,\n      username,\n      sobriety_start: sobrietyStart,\n      is_premium: false\n    }]);\n    if (profileError) throw profileError;\n  };\n  const signOut = async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","auth","getSession","then","data","_session$user","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","signIn","email","password","error","signInWithPassword","signUp","username","sobrietyStart","signUpError","profileError","from","insert","sobriety_start","is_premium","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Power Learn Project/DetoxifyAI/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { User, Session } from '@supabase/supabase-js';\r\nimport { supabase } from '../lib/supabase';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  loading: boolean;\r\n  signIn: (email: string, password: string) => Promise<void>;\r\n  signUp: (email: string, password: string, username: string, sobrietyStart: string) => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Get initial session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Listen for auth changes\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    const { error } = await supabase.auth.signInWithPassword({ email, password });\r\n    if (error) throw error;\r\n  };\r\n\r\n  const signUp = async (email: string, password: string, username: string, sobrietyStart: string) => {\r\n    const { error: signUpError } = await supabase.auth.signUp({ email, password });\r\n    if (signUpError) throw signUpError;\r\n\r\n    // Create user profile\r\n    const { error: profileError } = await supabase\r\n      .from('users')\r\n      .insert([\r\n        {\r\n          email,\r\n          username,\r\n          sobriety_start: sobrietyStart,\r\n          is_premium: false,\r\n        },\r\n      ]);\r\n    \r\n    if (profileError) throw profileError;\r\n  };\r\n\r\n  const signOut = async () => {\r\n    const { error } = await supabase.auth.signOut();\r\n    if (error) throw error;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    loading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}