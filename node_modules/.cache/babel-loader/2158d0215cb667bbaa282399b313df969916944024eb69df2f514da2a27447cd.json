{"ast":null,"code":"export class PaymentService {\n  constructor() {\n    this.publicKey = void 0;\n    this.secretKey = void 0;\n    this.baseUrl = void 0;\n    this.publicKey = process.env.REACT_APP_INTASEND_PUBLIC_KEY || '';\n    this.secretKey = process.env.REACT_APP_INTASEND_SECRET_KEY || '';\n    this.baseUrl = 'https://api.intasend.com/v1';\n  }\n  async createPayment(paymentData) {\n    if (!this.publicKey) {\n      console.error('Payment service not configured - missing public key');\n      return {\n        success: false,\n        message: 'Payment service not configured. Please contact support.'\n      };\n    }\n    if (!this.publicKey.startsWith('ISPubKey_')) {\n      console.error('Invalid IntaSend public key format:', this.publicKey);\n      return {\n        success: false,\n        message: 'Invalid payment service configuration. Please contact support.'\n      };\n    }\n    try {\n      console.log('Creating payment with data:', paymentData);\n      console.log('Using API endpoint:', `${this.baseUrl}/paymentlinks/`);\n      console.log('Public key configured:', !!this.publicKey);\n      console.log('Public key value:', this.publicKey.substring(0, 20) + '...');\n      console.log('Secret key configured:', !!this.secretKey);\n\n      // Test the API endpoint first\n      console.log('Testing API connectivity...');\n\n      // Test basic connectivity to IntaSend\n      try {\n        const testResponse = await fetch('https://api.intasend.com/v1/', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Token ${this.publicKey}`\n          }\n        });\n        console.log('API connectivity test status:', testResponse.status);\n      } catch (connectError) {\n        console.error('API connectivity test failed:', connectError);\n      }\n      const response = await fetch(`${this.baseUrl}/paymentlinks/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${this.publicKey}`\n        },\n        body: JSON.stringify({\n          amount: Math.round(paymentData.amount * 100),\n          // Convert to cents\n          currency: paymentData.currency,\n          email: paymentData.email,\n          first_name: paymentData.first_name,\n          last_name: paymentData.last_name,\n          phone_number: paymentData.phone_number,\n          description: paymentData.description,\n          redirect_url: `${window.location.origin}/payment-success`,\n          webhook_url: `${window.location.origin}/api/webhooks/payment`,\n          state: 'test',\n          // For sandbox testing\n          collection_method: 'link'\n        })\n      });\n      console.log('Payment response status:', response.status);\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Payment API error:', errorData);\n\n        // Try to parse JSON error response\n        try {\n          const errorJson = JSON.parse(errorData);\n          throw new Error(`Payment request failed: ${errorJson.message || errorJson.detail || 'Unknown error'}`);\n        } catch {\n          // If not JSON, use the raw text\n          throw new Error(`Payment request failed: ${response.status} - ${errorData.substring(0, 100)}`);\n        }\n      }\n      const data = await response.json();\n      console.log('Payment created successfully:', data);\n      return {\n        success: true,\n        message: 'Payment link created successfully',\n        checkout_url: data.checkout_url,\n        payment_id: data.payment_id\n      };\n    } catch (error) {\n      console.error('Payment error:', error);\n      return {\n        success: false,\n        message: `Failed to create payment: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n  async verifyPayment(paymentId) {\n    if (!this.publicKey) return false;\n    try {\n      const response = await fetch(`${this.baseUrl}/paymentlinks/${paymentId}/`, {\n        headers: {\n          'Authorization': `Token ${this.publicKey}`\n        }\n      });\n      if (!response.ok) return false;\n      const data = await response.json();\n      console.log('Payment verification result:', data);\n      return data.state === 'COMPLETED';\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      return false;\n    }\n  }\n}\nexport const paymentService = new PaymentService();","map":{"version":3,"names":["PaymentService","constructor","publicKey","secretKey","baseUrl","process","env","REACT_APP_INTASEND_PUBLIC_KEY","REACT_APP_INTASEND_SECRET_KEY","createPayment","paymentData","console","error","success","message","startsWith","log","substring","testResponse","fetch","method","headers","status","connectError","response","body","JSON","stringify","amount","Math","round","currency","email","first_name","last_name","phone_number","description","redirect_url","window","location","origin","webhook_url","state","collection_method","ok","errorData","text","errorJson","parse","Error","detail","data","json","checkout_url","payment_id","verifyPayment","paymentId","paymentService"],"sources":["D:/Power Learn Project/DetoxifyAI/src/lib/payments.ts"],"sourcesContent":["interface PaymentRequest {\r\n  amount: number;\r\n  currency: string;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone_number: string;\r\n  description: string;\r\n}\r\n\r\ninterface PaymentResponse {\r\n  success: boolean;\r\n  message: string;\r\n  checkout_url?: string;\r\n  payment_id?: string;\r\n}\r\n\r\nexport class PaymentService {\r\n  private publicKey: string;\r\n  private secretKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.publicKey = process.env.REACT_APP_INTASEND_PUBLIC_KEY || '';\r\n    this.secretKey = process.env.REACT_APP_INTASEND_SECRET_KEY || '';\r\n    this.baseUrl = 'https://api.intasend.com/v1';\r\n  }\r\n\r\n  async createPayment(paymentData: PaymentRequest): Promise<PaymentResponse> {\r\n    if (!this.publicKey) {\r\n      console.error('Payment service not configured - missing public key');\r\n      return {\r\n        success: false,\r\n        message: 'Payment service not configured. Please contact support.',\r\n      };\r\n    }\r\n\r\n    if (!this.publicKey.startsWith('ISPubKey_')) {\r\n      console.error('Invalid IntaSend public key format:', this.publicKey);\r\n      return {\r\n        success: false,\r\n        message: 'Invalid payment service configuration. Please contact support.',\r\n      };\r\n    }\r\n\r\n    try {\r\n      console.log('Creating payment with data:', paymentData);\r\n      console.log('Using API endpoint:', `${this.baseUrl}/paymentlinks/`);\r\n      console.log('Public key configured:', !!this.publicKey);\r\n      console.log('Public key value:', this.publicKey.substring(0, 20) + '...');\r\n      console.log('Secret key configured:', !!this.secretKey);\r\n\r\n      // Test the API endpoint first\r\n      console.log('Testing API connectivity...');\r\n      \r\n      // Test basic connectivity to IntaSend\r\n      try {\r\n        const testResponse = await fetch('https://api.intasend.com/v1/', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Token ${this.publicKey}`,\r\n          },\r\n        });\r\n        console.log('API connectivity test status:', testResponse.status);\r\n      } catch (connectError) {\r\n        console.error('API connectivity test failed:', connectError);\r\n      }\r\n      \r\n      const response = await fetch(`${this.baseUrl}/paymentlinks/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Token ${this.publicKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          amount: Math.round(paymentData.amount * 100), // Convert to cents\r\n          currency: paymentData.currency,\r\n          email: paymentData.email,\r\n          first_name: paymentData.first_name,\r\n          last_name: paymentData.last_name,\r\n          phone_number: paymentData.phone_number,\r\n          description: paymentData.description,\r\n          redirect_url: `${window.location.origin}/payment-success`,\r\n          webhook_url: `${window.location.origin}/api/webhooks/payment`,\r\n          state: 'test', // For sandbox testing\r\n          collection_method: 'link',\r\n        }),\r\n      });\r\n\r\n      console.log('Payment response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.text();\r\n        console.error('Payment API error:', errorData);\r\n        \r\n        // Try to parse JSON error response\r\n        try {\r\n          const errorJson = JSON.parse(errorData);\r\n          throw new Error(`Payment request failed: ${errorJson.message || errorJson.detail || 'Unknown error'}`);\r\n        } catch {\r\n          // If not JSON, use the raw text\r\n          throw new Error(`Payment request failed: ${response.status} - ${errorData.substring(0, 100)}`);\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Payment created successfully:', data);\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Payment link created successfully',\r\n        checkout_url: data.checkout_url,\r\n        payment_id: data.payment_id,\r\n      };\r\n    } catch (error) {\r\n      console.error('Payment error:', error);\r\n      return {\r\n        success: false,\r\n        message: `Failed to create payment: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async verifyPayment(paymentId: string): Promise<boolean> {\r\n    if (!this.publicKey) return false;\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/paymentlinks/${paymentId}/`, {\r\n        headers: {\r\n          'Authorization': `Token ${this.publicKey}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      console.log('Payment verification result:', data);\r\n      return data.state === 'COMPLETED';\r\n    } catch (error) {\r\n      console.error('Payment verification error:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const paymentService = new PaymentService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}