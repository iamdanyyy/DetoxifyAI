{"ast":null,"code":"var _jsxFileName = \"D:\\\\Power Learn Project\\\\DetoxifyAI\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setSession(session);\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user2;\n      setSession(session);\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signIn = async (email, password) => {\n    console.log('Attempting sign in for:', email);\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      console.error('Sign in error:', error);\n      throw error;\n    }\n    console.log('Sign in successful:', data);\n  };\n  const signUp = async (email, password, username, sobrietyStart) => {\n    console.log('Attempting sign up for:', email);\n\n    // Sign up the user with metadata\n    const {\n      data,\n      error: signUpError\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          username,\n          sobriety_start: sobrietyStart\n        }\n      }\n    });\n    if (signUpError) {\n      console.error('Sign up error:', signUpError);\n      throw signUpError;\n    }\n    console.log('Sign up successful:', data);\n\n    // The database trigger should automatically create the user profile\n    // But let's also manually create it as a backup\n    if (data.user) {\n      try {\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: data.user.id,\n          email,\n          username,\n          sobriety_start: sobrietyStart,\n          is_premium: false\n        }]);\n        if (profileError) {\n          console.error('Profile creation error:', profileError);\n          // Don't throw here as the trigger might have already created it\n        }\n      } catch (error) {\n        console.error('Manual profile creation failed:', error);\n        // Continue anyway as the trigger should handle it\n      }\n    }\n  };\n  const signOut = async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","auth","getSession","then","data","_session$user","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","signIn","email","password","console","log","error","signInWithPassword","signUp","username","sobrietyStart","signUpError","options","sobriety_start","profileError","from","insert","id","is_premium","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Power Learn Project/DetoxifyAI/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { User, Session } from '@supabase/supabase-js';\r\nimport { supabase } from '../lib/supabase';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  loading: boolean;\r\n  signIn: (email: string, password: string) => Promise<void>;\r\n  signUp: (email: string, password: string, username: string, sobrietyStart: string) => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Get initial session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Listen for auth changes\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    console.log('Attempting sign in for:', email);\r\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password });\r\n    if (error) {\r\n      console.error('Sign in error:', error);\r\n      throw error;\r\n    }\r\n    console.log('Sign in successful:', data);\r\n  };\r\n\r\n  const signUp = async (email: string, password: string, username: string, sobrietyStart: string) => {\r\n    console.log('Attempting sign up for:', email);\r\n    \r\n    // Sign up the user with metadata\r\n    const { data, error: signUpError } = await supabase.auth.signUp({ \r\n      email, \r\n      password,\r\n      options: {\r\n        data: {\r\n          username,\r\n          sobriety_start: sobrietyStart\r\n        }\r\n      }\r\n    });\r\n    \r\n    if (signUpError) {\r\n      console.error('Sign up error:', signUpError);\r\n      throw signUpError;\r\n    }\r\n\r\n    console.log('Sign up successful:', data);\r\n    \r\n    // The database trigger should automatically create the user profile\r\n    // But let's also manually create it as a backup\r\n    if (data.user) {\r\n      try {\r\n        const { error: profileError } = await supabase\r\n          .from('users')\r\n          .insert([\r\n            {\r\n              id: data.user.id,\r\n              email,\r\n              username,\r\n              sobriety_start: sobrietyStart,\r\n              is_premium: false,\r\n            },\r\n          ]);\r\n        \r\n        if (profileError) {\r\n          console.error('Profile creation error:', profileError);\r\n          // Don't throw here as the trigger might have already created it\r\n        }\r\n      } catch (error) {\r\n        console.error('Manual profile creation failed:', error);\r\n        // Continue anyway as the trigger should handle it\r\n      }\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    const { error } = await supabase.auth.signOut();\r\n    if (error) throw error;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    loading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}