{"ast":null,"code":"import { supabase } from './supabase';\nexport const ensureUserProfile = async user => {\n  if (!user) return;\n  try {\n    // Check if user profile exists\n    const {\n      data: existingProfile,\n      error: fetchError\n    } = await supabase.from('users').select('*').eq('id', user.id).single();\n    if (fetchError && fetchError.code === 'PGRST116') {\n      var _user$user_metadata, _user$user_metadata2;\n      // Profile doesn't exist, create it\n      console.log('Creating user profile for:', user.id);\n      const {\n        error: insertError\n      } = await supabase.from('users').insert([{\n        id: user.id,\n        email: user.email,\n        username: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.username) || 'User',\n        sobriety_start: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.sobriety_start) || new Date().toISOString().split('T')[0],\n        is_premium: false\n      }]);\n      if (insertError) {\n        console.error('Failed to create user profile:', insertError);\n        throw insertError;\n      }\n      console.log('User profile created successfully');\n    } else if (fetchError) {\n      console.error('Error checking user profile:', fetchError);\n      throw fetchError;\n    } else {\n      console.log('User profile already exists');\n    }\n  } catch (error) {\n    console.error('Error ensuring user profile:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","ensureUserProfile","user","data","existingProfile","error","fetchError","from","select","eq","id","single","code","_user$user_metadata","_user$user_metadata2","console","log","insertError","insert","email","username","user_metadata","sobriety_start","Date","toISOString","split","is_premium"],"sources":["D:/Power Learn Project/DetoxifyAI/src/lib/userUtils.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const ensureUserProfile = async (user: any) => {\r\n  if (!user) return;\r\n\r\n  try {\r\n    // Check if user profile exists\r\n    const { data: existingProfile, error: fetchError } = await supabase\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    if (fetchError && fetchError.code === 'PGRST116') {\r\n      // Profile doesn't exist, create it\r\n      console.log('Creating user profile for:', user.id);\r\n      \r\n      const { error: insertError } = await supabase\r\n        .from('users')\r\n        .insert([\r\n          {\r\n            id: user.id,\r\n            email: user.email,\r\n            username: user.user_metadata?.username || 'User',\r\n            sobriety_start: user.user_metadata?.sobriety_start || new Date().toISOString().split('T')[0],\r\n            is_premium: false,\r\n          },\r\n        ]);\r\n\r\n      if (insertError) {\r\n        console.error('Failed to create user profile:', insertError);\r\n        throw insertError;\r\n      }\r\n\r\n      console.log('User profile created successfully');\r\n    } else if (fetchError) {\r\n      console.error('Error checking user profile:', fetchError);\r\n      throw fetchError;\r\n    } else {\r\n      console.log('User profile already exists');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error ensuring user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAErC,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,IAAS,IAAK;EACpD,IAAI,CAACA,IAAI,EAAE;EAEX,IAAI;IACF;IACA,MAAM;MAAEC,IAAI,EAAEC,eAAe;MAAEC,KAAK,EAAEC;IAAW,CAAC,GAAG,MAAMN,QAAQ,CAChEO,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEP,IAAI,CAACQ,EAAE,CAAC,CACjBC,MAAM,CAAC,CAAC;IAEX,IAAIL,UAAU,IAAIA,UAAU,CAACM,IAAI,KAAK,UAAU,EAAE;MAAA,IAAAC,mBAAA,EAAAC,oBAAA;MAChD;MACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEd,IAAI,CAACQ,EAAE,CAAC;MAElD,MAAM;QAAEL,KAAK,EAAEY;MAAY,CAAC,GAAG,MAAMjB,QAAQ,CAC1CO,IAAI,CAAC,OAAO,CAAC,CACbW,MAAM,CAAC,CACN;QACER,EAAE,EAAER,IAAI,CAACQ,EAAE;QACXS,KAAK,EAAEjB,IAAI,CAACiB,KAAK;QACjBC,QAAQ,EAAE,EAAAP,mBAAA,GAAAX,IAAI,CAACmB,aAAa,cAAAR,mBAAA,uBAAlBA,mBAAA,CAAoBO,QAAQ,KAAI,MAAM;QAChDE,cAAc,EAAE,EAAAR,oBAAA,GAAAZ,IAAI,CAACmB,aAAa,cAAAP,oBAAA,uBAAlBA,oBAAA,CAAoBQ,cAAc,KAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5FC,UAAU,EAAE;MACd,CAAC,CACF,CAAC;MAEJ,IAAIT,WAAW,EAAE;QACfF,OAAO,CAACV,KAAK,CAAC,gCAAgC,EAAEY,WAAW,CAAC;QAC5D,MAAMA,WAAW;MACnB;MAEAF,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC,MAAM,IAAIV,UAAU,EAAE;MACrBS,OAAO,CAACV,KAAK,CAAC,8BAA8B,EAAEC,UAAU,CAAC;MACzD,MAAMA,UAAU;IAClB,CAAC,MAAM;MACLS,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdU,OAAO,CAACV,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}