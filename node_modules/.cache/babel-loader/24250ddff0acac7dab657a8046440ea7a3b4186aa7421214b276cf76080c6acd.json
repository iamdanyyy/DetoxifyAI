{"ast":null,"code":"export class PaymentService {\n  constructor() {\n    this.publicKey = void 0;\n    this.secretKey = void 0;\n    this.baseUrl = void 0;\n    this.publicKey = process.env.REACT_APP_INTASEND_PUBLIC_KEY || '';\n    this.secretKey = process.env.REACT_APP_INTASEND_SECRET_KEY || '';\n    this.baseUrl = 'https://sandbox.intasend.com/api/v1';\n  }\n  async createPayment(paymentData) {\n    if (!this.apiKey) {\n      return {\n        success: false,\n        message: 'Payment service not configured. Please contact support.'\n      };\n    }\n    try {\n      const response = await fetch(`${this.baseUrl}/payment/links/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          amount: paymentData.amount,\n          currency: paymentData.currency,\n          email: paymentData.email,\n          first_name: paymentData.first_name,\n          last_name: paymentData.last_name,\n          phone_number: paymentData.phone_number,\n          description: paymentData.description,\n          redirect_url: `${window.location.origin}/payment-success`,\n          webhook_url: `${window.location.origin}/api/webhooks/payment`\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Payment request failed');\n      }\n      const data = await response.json();\n      return {\n        success: true,\n        message: 'Payment link created successfully',\n        checkout_url: data.checkout_url,\n        payment_id: data.payment_id\n      };\n    } catch (error) {\n      console.error('Payment error:', error);\n      return {\n        success: false,\n        message: 'Failed to create payment. Please try again.'\n      };\n    }\n  }\n  async verifyPayment(paymentId) {\n    if (!this.apiKey) return false;\n    try {\n      const response = await fetch(`${this.baseUrl}/payment/links/${paymentId}/`, {\n        headers: {\n          'Authorization': `Token ${this.apiKey}`\n        }\n      });\n      if (!response.ok) return false;\n      const data = await response.json();\n      return data.state === 'COMPLETED';\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      return false;\n    }\n  }\n}\nexport const paymentService = new PaymentService();","map":{"version":3,"names":["PaymentService","constructor","publicKey","secretKey","baseUrl","process","env","REACT_APP_INTASEND_PUBLIC_KEY","REACT_APP_INTASEND_SECRET_KEY","createPayment","paymentData","apiKey","success","message","response","fetch","method","headers","body","JSON","stringify","amount","currency","email","first_name","last_name","phone_number","description","redirect_url","window","location","origin","webhook_url","ok","Error","data","json","checkout_url","payment_id","error","console","verifyPayment","paymentId","state","paymentService"],"sources":["D:/Power Learn Project/DetoxifyAI/src/lib/payments.ts"],"sourcesContent":["interface PaymentRequest {\r\n  amount: number;\r\n  currency: string;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone_number: string;\r\n  description: string;\r\n}\r\n\r\ninterface PaymentResponse {\r\n  success: boolean;\r\n  message: string;\r\n  checkout_url?: string;\r\n  payment_id?: string;\r\n}\r\n\r\nexport class PaymentService {\r\n  private publicKey: string;\r\n  private secretKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.publicKey = process.env.REACT_APP_INTASEND_PUBLIC_KEY || '';\r\n    this.secretKey = process.env.REACT_APP_INTASEND_SECRET_KEY || '';\r\n    this.baseUrl = 'https://sandbox.intasend.com/api/v1';\r\n  }\r\n\r\n  async createPayment(paymentData: PaymentRequest): Promise<PaymentResponse> {\r\n    if (!this.apiKey) {\r\n      return {\r\n        success: false,\r\n        message: 'Payment service not configured. Please contact support.',\r\n      };\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/payment/links/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Token ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          amount: paymentData.amount,\r\n          currency: paymentData.currency,\r\n          email: paymentData.email,\r\n          first_name: paymentData.first_name,\r\n          last_name: paymentData.last_name,\r\n          phone_number: paymentData.phone_number,\r\n          description: paymentData.description,\r\n          redirect_url: `${window.location.origin}/payment-success`,\r\n          webhook_url: `${window.location.origin}/api/webhooks/payment`,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Payment request failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Payment link created successfully',\r\n        checkout_url: data.checkout_url,\r\n        payment_id: data.payment_id,\r\n      };\r\n    } catch (error) {\r\n      console.error('Payment error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to create payment. Please try again.',\r\n      };\r\n    }\r\n  }\r\n\r\n  async verifyPayment(paymentId: string): Promise<boolean> {\r\n    if (!this.apiKey) return false;\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/payment/links/${paymentId}/`, {\r\n        headers: {\r\n          'Authorization': `Token ${this.apiKey}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      return data.state === 'COMPLETED';\r\n    } catch (error) {\r\n      console.error('Payment verification error:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const paymentService = new PaymentService();\r\n\r\n"],"mappings":"AAiBA,OAAO,MAAMA,cAAc,CAAC;EAK1BC,WAAWA,CAAA,EAAG;IAAA,KAJNC,SAAS;IAAA,KACTC,SAAS;IAAA,KACTC,OAAO;IAGb,IAAI,CAACF,SAAS,GAAGG,OAAO,CAACC,GAAG,CAACC,6BAA6B,IAAI,EAAE;IAChE,IAAI,CAACJ,SAAS,GAAGE,OAAO,CAACC,GAAG,CAACE,6BAA6B,IAAI,EAAE;IAChE,IAAI,CAACJ,OAAO,GAAG,qCAAqC;EACtD;EAEA,MAAMK,aAAaA,CAACC,WAA2B,EAA4B;IACzE,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;MAChB,OAAO;QACLC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,iBAAiB,EAAE;QAC7DY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,SAAS,IAAI,CAACN,MAAM;QACvC,CAAC;QACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,MAAM,EAAEX,WAAW,CAACW,MAAM;UAC1BC,QAAQ,EAAEZ,WAAW,CAACY,QAAQ;UAC9BC,KAAK,EAAEb,WAAW,CAACa,KAAK;UACxBC,UAAU,EAAEd,WAAW,CAACc,UAAU;UAClCC,SAAS,EAAEf,WAAW,CAACe,SAAS;UAChCC,YAAY,EAAEhB,WAAW,CAACgB,YAAY;UACtCC,WAAW,EAAEjB,WAAW,CAACiB,WAAW;UACpCC,YAAY,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,kBAAkB;UACzDC,WAAW,EAAE,GAAGH,MAAM,CAACC,QAAQ,CAACC,MAAM;QACxC,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACjB,QAAQ,CAACmB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA,MAAMC,IAAI,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;MAElC,OAAO;QACLxB,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,mCAAmC;QAC5CwB,YAAY,EAAEF,IAAI,CAACE,YAAY;QAC/BC,UAAU,EAAEH,IAAI,CAACG;MACnB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,OAAO;QACL3B,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;EAEA,MAAM4B,aAAaA,CAACC,SAAiB,EAAoB;IACvD,IAAI,CAAC,IAAI,CAAC/B,MAAM,EAAE,OAAO,KAAK;IAE9B,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,kBAAkBsC,SAAS,GAAG,EAAE;QAC1EzB,OAAO,EAAE;UACP,eAAe,EAAE,SAAS,IAAI,CAACN,MAAM;QACvC;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACmB,EAAE,EAAE,OAAO,KAAK;MAE9B,MAAME,IAAI,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACQ,KAAK,KAAK,WAAW;IACnC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,KAAK;IACd;EACF;AACF;AAEA,OAAO,MAAMK,cAAc,GAAG,IAAI5C,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}