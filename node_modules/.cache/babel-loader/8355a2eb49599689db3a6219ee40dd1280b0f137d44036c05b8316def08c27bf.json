{"ast":null,"code":"export class PaymentService {\n  constructor() {\n    this.publicKey = void 0;\n    this.secretKey = void 0;\n    this.baseUrl = void 0;\n    this.publicKey = process.env.REACT_APP_INTASEND_PUBLIC_KEY || '';\n    this.secretKey = process.env.REACT_APP_INTASEND_SECRET_KEY || '';\n    // Use local proxy server to avoid CORS issues\n    this.baseUrl = process.env.NODE_ENV === 'production' ? 'https://your-production-domain.com/api' : 'http://localhost:3001/api';\n\n    // Log sandbox mode status\n    console.log('Payment service initialized in sandbox mode');\n    console.log('Using backend proxy at:', this.baseUrl);\n  }\n  async createPayment(paymentData) {\n    // Since we're using backend proxy, we don't need to validate the frontend API key\n    console.log('Creating payment via backend proxy...');\n    try {\n      console.log('Creating payment with data:', paymentData);\n      console.log('Using API endpoint:', `${this.baseUrl}/paymentlinks/`);\n      console.log('Public key configured:', !!this.publicKey);\n      console.log('Public key value:', this.publicKey.substring(0, 20) + '...');\n      console.log('Secret key configured:', !!this.secretKey);\n      const response = await fetch(`${this.baseUrl}/payments/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: paymentData.amount,\n          currency: paymentData.currency,\n          email: paymentData.email,\n          first_name: paymentData.first_name,\n          last_name: paymentData.last_name,\n          phone_number: paymentData.phone_number,\n          description: paymentData.description\n        })\n      });\n      console.log('Payment response status:', response.status);\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Payment API error:', errorData);\n\n        // Try to parse JSON error response\n        try {\n          const errorJson = JSON.parse(errorData);\n          throw new Error(`Payment request failed: ${errorJson.message || errorJson.detail || 'Unknown error'}`);\n        } catch {\n          // If not JSON, use the raw text\n          throw new Error(`Payment request failed: ${response.status} - ${errorData.substring(0, 100)}`);\n        }\n      }\n      const data = await response.json();\n      console.log('Payment created successfully:', data);\n      return {\n        success: true,\n        message: 'Payment link created successfully',\n        checkout_url: data.checkout_url,\n        payment_id: data.payment_id\n      };\n    } catch (error) {\n      console.error('Payment error:', error);\n      return {\n        success: false,\n        message: `Failed to create payment: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n  async verifyPayment(paymentId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/payments/verify/${paymentId}`);\n      if (!response.ok) return false;\n      const data = await response.json();\n      console.log('Payment verification result:', data);\n      return data.isCompleted;\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      return false;\n    }\n  }\n}\nexport const paymentService = new PaymentService();","map":{"version":3,"names":["PaymentService","constructor","publicKey","secretKey","baseUrl","process","env","REACT_APP_INTASEND_PUBLIC_KEY","REACT_APP_INTASEND_SECRET_KEY","NODE_ENV","console","log","createPayment","paymentData","substring","response","fetch","method","headers","body","JSON","stringify","amount","currency","email","first_name","last_name","phone_number","description","status","ok","errorData","text","error","errorJson","parse","Error","message","detail","data","json","success","checkout_url","payment_id","verifyPayment","paymentId","isCompleted","paymentService"],"sources":["D:/Power Learn Project/DetoxifyAI/src/lib/payments.ts"],"sourcesContent":["interface PaymentRequest {\r\n  amount: number;\r\n  currency: string;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone_number: string;\r\n  description: string;\r\n}\r\n\r\ninterface PaymentResponse {\r\n  success: boolean;\r\n  message: string;\r\n  checkout_url?: string;\r\n  payment_id?: string;\r\n}\r\n\r\nexport class PaymentService {\r\n  private publicKey: string;\r\n  private secretKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.publicKey = process.env.REACT_APP_INTASEND_PUBLIC_KEY || '';\r\n    this.secretKey = process.env.REACT_APP_INTASEND_SECRET_KEY || '';\r\n    // Use local proxy server to avoid CORS issues\r\n    this.baseUrl = process.env.NODE_ENV === 'production' \r\n      ? 'https://your-production-domain.com/api' \r\n      : 'http://localhost:3001/api';\r\n    \r\n    // Log sandbox mode status\r\n    console.log('Payment service initialized in sandbox mode');\r\n    console.log('Using backend proxy at:', this.baseUrl);\r\n  }\r\n\r\n  async createPayment(paymentData: PaymentRequest): Promise<PaymentResponse> {\r\n    // Since we're using backend proxy, we don't need to validate the frontend API key\r\n    console.log('Creating payment via backend proxy...');\r\n\r\n    try {\r\n      console.log('Creating payment with data:', paymentData);\r\n      console.log('Using API endpoint:', `${this.baseUrl}/paymentlinks/`);\r\n      console.log('Public key configured:', !!this.publicKey);\r\n      console.log('Public key value:', this.publicKey.substring(0, 20) + '...');\r\n      console.log('Secret key configured:', !!this.secretKey);\r\n\r\n      const response = await fetch(`${this.baseUrl}/payments/create`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          amount: paymentData.amount,\r\n          currency: paymentData.currency,\r\n          email: paymentData.email,\r\n          first_name: paymentData.first_name,\r\n          last_name: paymentData.last_name,\r\n          phone_number: paymentData.phone_number,\r\n          description: paymentData.description,\r\n        }),\r\n      });\r\n\r\n      console.log('Payment response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.text();\r\n        console.error('Payment API error:', errorData);\r\n        \r\n        // Try to parse JSON error response\r\n        try {\r\n          const errorJson = JSON.parse(errorData);\r\n          throw new Error(`Payment request failed: ${errorJson.message || errorJson.detail || 'Unknown error'}`);\r\n        } catch {\r\n          // If not JSON, use the raw text\r\n          throw new Error(`Payment request failed: ${response.status} - ${errorData.substring(0, 100)}`);\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Payment created successfully:', data);\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Payment link created successfully',\r\n        checkout_url: data.checkout_url,\r\n        payment_id: data.payment_id,\r\n      };\r\n    } catch (error) {\r\n      console.error('Payment error:', error);\r\n      return {\r\n        success: false,\r\n        message: `Failed to create payment: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async verifyPayment(paymentId: string): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/payments/verify/${paymentId}`);\r\n\r\n      if (!response.ok) return false;\r\n\r\n      const data = await response.json();\r\n      console.log('Payment verification result:', data);\r\n      return data.isCompleted;\r\n    } catch (error) {\r\n      console.error('Payment verification error:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const paymentService = new PaymentService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}